{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Name \u00b6 Choose a self-explaining name for your project. Description \u00b6 Let people know what your project can do specifically. Provide context and add a link to any reference visitors might be unfamiliar with. A list of Features or a Background subsection can also be added here. If there are alternatives to your project, this is a good place to list differentiating factors. Badges \u00b6 On some READMEs, you may see small images that convey metadata, such as whether or not all the tests are passing for the project. You can use Shields to add some to your README. Many services also have instructions for adding a badge. Visuals \u00b6 Depending on what you are making, it can be a good idea to include screenshots or even a video (you'll frequently see GIFs rather than actual videos). Tools like ttygif can help, but check out Asciinema for a more sophisticated method. Installation \u00b6 Within a particular ecosystem, there may be a common way of installing things, such as using Yarn , NuGet , or Homebrew . However, consider the possibility that whoever is reading your README is a novice and would like more guidance. Listing specific steps helps remove ambiguity and gets people to using your project as quickly as possible. If it only runs in a specific context like a particular programming language version or operating system or has dependencies that have to be installed manually, also add a Requirements subsection. Usage \u00b6 Use examples liberally, and show the expected output if you can. It's helpful to have inline the smallest example of usage that you can demonstrate, while providing links to more sophisticated examples if they are too long to reasonably include in the README. Support \u00b6 Tell people where they can go to for help. It can be any combination of an issue tracker, a chat room, an email address, etc. Roadmap \u00b6 If you have ideas for releases in the future, it is a good idea to list them in the README. Contributing \u00b6 State if you are open to contributions and what your requirements are for accepting them. For people who want to make changes to your project, it's helpful to have some documentation on how to get started. Perhaps there is a script that they should run or some environment variables that they need to set. Make these steps explicit. These instructions could also be useful to your future self. You can also document commands to lint the code or run tests . These steps help to ensure high code quality and reduce the likelihood that the changes inadvertently break something. Having instructions for running tests is especially helpful if it requires external setup, such as starting a Selenium server for testing in a browser. Authors and acknowledgment \u00b6 Show your appreciation to those who have contributed to the project. License \u00b6 For open source projects, say how it is licensed . Project status \u00b6 If you have run out of energy or time for your project, put a note at the top of the README saying that development has slowed down or stopped completely. Someone may choose to fork your project or volunteer to step in as a maintainer or owner, allowing your project to keep going. You can also make an explicit request for maintainers.","title":"Home"},{"location":"#name","text":"Choose a self-explaining name for your project.","title":"Name"},{"location":"#description","text":"Let people know what your project can do specifically. Provide context and add a link to any reference visitors might be unfamiliar with. A list of Features or a Background subsection can also be added here. If there are alternatives to your project, this is a good place to list differentiating factors.","title":"Description"},{"location":"#badges","text":"On some READMEs, you may see small images that convey metadata, such as whether or not all the tests are passing for the project. You can use Shields to add some to your README. Many services also have instructions for adding a badge.","title":"Badges"},{"location":"#visuals","text":"Depending on what you are making, it can be a good idea to include screenshots or even a video (you'll frequently see GIFs rather than actual videos). Tools like ttygif can help, but check out Asciinema for a more sophisticated method.","title":"Visuals"},{"location":"#installation","text":"Within a particular ecosystem, there may be a common way of installing things, such as using Yarn , NuGet , or Homebrew . However, consider the possibility that whoever is reading your README is a novice and would like more guidance. Listing specific steps helps remove ambiguity and gets people to using your project as quickly as possible. If it only runs in a specific context like a particular programming language version or operating system or has dependencies that have to be installed manually, also add a Requirements subsection.","title":"Installation"},{"location":"#usage","text":"Use examples liberally, and show the expected output if you can. It's helpful to have inline the smallest example of usage that you can demonstrate, while providing links to more sophisticated examples if they are too long to reasonably include in the README.","title":"Usage"},{"location":"#support","text":"Tell people where they can go to for help. It can be any combination of an issue tracker, a chat room, an email address, etc.","title":"Support"},{"location":"#roadmap","text":"If you have ideas for releases in the future, it is a good idea to list them in the README.","title":"Roadmap"},{"location":"#contributing","text":"State if you are open to contributions and what your requirements are for accepting them. For people who want to make changes to your project, it's helpful to have some documentation on how to get started. Perhaps there is a script that they should run or some environment variables that they need to set. Make these steps explicit. These instructions could also be useful to your future self. You can also document commands to lint the code or run tests . These steps help to ensure high code quality and reduce the likelihood that the changes inadvertently break something. Having instructions for running tests is especially helpful if it requires external setup, such as starting a Selenium server for testing in a browser.","title":"Contributing"},{"location":"#authors-and-acknowledgment","text":"Show your appreciation to those who have contributed to the project.","title":"Authors and acknowledgment"},{"location":"#license","text":"For open source projects, say how it is licensed .","title":"License"},{"location":"#project-status","text":"If you have run out of energy or time for your project, put a note at the top of the README saying that development has slowed down or stopped completely. Someone may choose to fork your project or volunteer to step in as a maintainer or owner, allowing your project to keep going. You can also make an explicit request for maintainers.","title":"Project status"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 Introduction \u00b6 Write something nice here \u00b6 First off, thank you for considering contributing to Active Admin. It's people like you that make Active Admin such a great tool. [source: Active Admin ] Need more inspiration? [1] Read The Docs [2] Mustache.js Tell them why they should read your guidelines \u00b6 Following these guidelines helps to communicate that you respect the time of the developers managing and developing this open source project. In return, they should reciprocate that respect in addressing your issue, assessing changes, and helping you finalize your pull requests. [source: Hoodie ] Explain what kinds of contributions you are looking for \u00b6 Keep an open mind! Improving documentation, bug triaging, or writing tutorials are all examples of helpful contributions that mean less work for you. Elasticsearch is an open source project and we love to receive contributions from our community \u2014 you! There are many ways to contribute, from writing tutorials or blog posts, improving the documentation, submitting bug reports and feature requests or writing code which can be incorporated into Elasticsearch itself. [source: Elasticsearch ] Need more inspiration? [1] Devise [2] Geocoder (\u201cknown issues\u201d) Explain contributions you are NOT looking for (if any) \u00b6 Again, defining this up front means less work for you. If someone ignores your guide and submits something you don\u2019t want, you can simply close it and point to your policy. Please, don't use the issue tracker for [support questions]. Check whether the #pocoo IRC channel on Freenode can help with your issue. If your problem is not strictly Werkzeug or Flask specific, #python is generally more active. Stack Overflow is also worth considering. [source: Flask ] Need more inspiration? [1] cucumber-ruby [2] Read the Docs Ground Rules \u00b6 Set expectations for behavior (yours, and theirs) \u00b6 This includes not just how to communicate with others (being respectful, considerate, etc) but also technical responsibilities (importance of testing, project dependencies, etc). Mention and link to your code of conduct, if you have one. Responsibilities Ensure cross-platform compatibility for every change that's accepted. Windows, Mac, Debian & Ubuntu Linux. Ensure that code that goes into core meets all requirements in this checklist: https://gist.github.com/audreyr/4feef90445b9680475f2 Create issues for any major changes and enhancements that you wish to make. Discuss things transparently and get community feedback. Don't add any classes to the codebase unless absolutely needed. Err on the side of using functions. Keep feature versions as small as possible, preferably one new feature per version. Be welcoming to newcomers and encourage diverse new contributors from all backgrounds. See the Python Community Code of Conduct . [source: cookiecutter ] Need more inspiration? [1] Celery [2] geocoder Your First Contribution \u00b6 Help people who are new to your project understand where they can be most helpful. This is also a good time to let people know if you follow a label convention for flagging beginner issues. Unsure where to begin contributing to Atom? You can start by looking through these beginner and help-wanted issues: Beginner issues - issues which should only require a few lines of code, and a test or two. Help wanted issues - issues which should be a bit more involved than beginner issues. Both issue lists are sorted by total number of comments. While not perfect, number of comments is a reasonable proxy for impact a given change will have. [source: Atom ] Need more inspiration? [1] Read the Docs [2] Django (scroll down to \"Guidelines\" as well) Bonus points: Add a link to a resource for people who have never contributed to open source before \u00b6 Here are a couple of friendly tutorials you can include: http://makeapullrequest.com/ and http://www.firsttimersonly.com/ Working on your first Pull Request? You can learn how from this free series, How to Contribute to an Open Source Project on GitHub . [source: React ] As a side note, it helps to use newcomer-friendly language throughout the rest of your document. Here are a couple of examples from Active Admin : At this point, you're ready to make your changes! Feel free to ask for help; everyone is a beginner at first :smile_cat: If a maintainer asks you to \"rebase\" your PR, they're saying that a lot of code has changed, and that you need to update your branch so it's easier to merge. Getting started \u00b6 Give them a quick walkthrough of how to submit a contribution \u00b6 How you write this is up to you, but some things you may want to include: Let them know if they need to sign a CLA, agree to a DCO, or get any other legal stuff out of the way If tests are required for contributions, let them know, and explain how to run the tests If you use anything other than GitHub to manage issues (ex. JIRA or Trac), let them know which tools they\u2019ll need to contribute For something that is bigger than a one or two line fix: Create your own fork of the code Do the changes in your fork If you like the change and think the project could use it: *Be sure you have followed the code style for the project. Sign the Contributor License Agreement, CLA, with the jQuery Foundation. *Note the jQuery Foundation Code of Conduct. Send a pull request indicating that you have a CLA on file. [source: Requirejs ] Need more inspiration? [1] Active Admin [2] Node.js [3] Ember.js If you have a different process for small or \"obvious\" fixes, let them know \u00b6 Small contributions such as fixing spelling errors, where the content is small enough to not be considered intellectual property, can be submitted by a contributor as a patch, without a CLA. As a rule of thumb, changes are obvious fixes if they do not introduce any new functionality or creative thinking. As long as the change does not affect functionality, some likely examples include the following: Spelling / grammar fixes Typo correction, white space and formatting changes Comment clean up Bug fixes that change default return values or error codes stored in constants Adding logging messages or debugging output Changes to \u2018metadata\u2019 files like Gemfile, .gitignore, build scripts, etc. Moving source files from one directory or package to another [source: Chef ] Need more inspiration? [1] Puppet How to report a bug \u00b6 Explain security disclosures first \u00b6 At bare minimum, include this sentence: If you find a security vulnerability, do NOT open an issue. Email XXXX instead. If you don\u2019t want to use your personal contact information, set up a \u201csecurity@\u201d email address. Larger projects might have more formal processes for disclosing security, including encrypted communication. (Disclosure: I am not a security expert.) Any security issues should be submitted directly to security@travis-ci.org In order to determine whether you are dealing with a security issue, ask yourself these two questions: Can I access something that's not mine, or something I shouldn't have access to? Can I disable something for other people? If the answer to either of those two questions are \"yes\", then you're probably dealing with a security issue. Note that even if you answer \"no\" to both questions, you may still be dealing with a security issue, so if you're unsure, just email us at security@travis-ci.org . [source: Travis CI ] Need more inspiration? [1] Celery [2] Express.js Tell your contributors how to file a bug report \u00b6 You can even include a template so people can just copy-paste (again, less work for you). When filing an issue, make sure to answer these five questions: What version of Go are you using (go version)? What operating system and processor architecture are you using? What did you do? What did you expect to see? What did you see instead? General questions should go to the golang-nuts mailing list instead of the issue tracker. The gophers there will answer or ask you to file an issue if you've tripped over a bug. [source: Go ] Need more inspiration? [1] Celery [2] Atom (includes template) How to suggest a feature or enhancement \u00b6 If you have a particular roadmap, goals, or philosophy for development, share it here \u00b6 This information will give contributors context before they make suggestions that may not align with the project\u2019s needs. The Express philosophy is to provide small, robust tooling for HTTP servers, making it a great solution for single page applications, web sites, hybrids, or public HTTP APIs. Express does not force you to use any specific ORM or template engine. With support for over 14 template engines via Consolidate.js, you can quickly craft your perfect framework. [source: Express ] Need more inspiration? Active Admin Explain your desired process for suggesting a feature \u00b6 If there is back-and-forth or signoff required, say so. Ask them to scope the feature, thinking through why it\u2019s needed and how it might work. If you find yourself wishing for a feature that doesn't exist in Elasticsearch, you are probably not alone. There are bound to be others out there with similar needs. Many of the features that Elasticsearch has today have been added because our users saw the need. Open an issue on our issues list on GitHub which describes the feature you would like to see, why you need it, and how it should work. [source: Elasticsearch ] Need more inspiration? [1] Hoodie [2] Ember.js Code review process \u00b6 Explain how a contribution gets accepted after it\u2019s been submitted \u00b6 Who reviews it? Who needs to sign off before it\u2019s accepted? When should a contributor expect to hear from you? How can contributors get commit access, if at all? The core team looks at Pull Requests on a regular basis in a weekly triage meeting that we hold in a public Google Hangout. The hangout is announced in the weekly status updates that are sent to the puppet-dev list. Notes are posted to the Puppet Community community-triage repo and include a link to a YouTube recording of the hangout. After feedback has been given we expect responses within two weeks. After two weeks we may close the pull request if it isn't showing any activity. [source: Puppet ] Need more inspiration? [1] Meteor [2] Express.js Community \u00b6 If there are other channels you use besides GitHub to discuss contributions, mention them here. You can also list the author, maintainers, and/or contributors here, or set expectations for response time. You can chat with the core team on https://gitter.im/cucumber/cucumber . We try to have office hours on Fridays. [source: cucumber-ruby ] Need more inspiration? [1] Chef [2] Cookiecutter BONUS: Code, commit message and labeling conventions \u00b6 These sections are not necessary, but can help streamline the contributions you receive. Explain your preferred style for code, if you have any \u00b6 Need inspiration? [1] Requirejs [2] Elasticsearch Explain if you use any commit message conventions \u00b6 Need inspiration? [1] Angular [2] Node.js Explain if you use any labeling conventions for issues \u00b6 Need inspiration? [1] StandardIssueLabels [2] Atom","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING/#introduction","text":"","title":"Introduction"},{"location":"CONTRIBUTING/#write-something-nice-here","text":"First off, thank you for considering contributing to Active Admin. It's people like you that make Active Admin such a great tool. [source: Active Admin ] Need more inspiration? [1] Read The Docs [2] Mustache.js","title":"Write something nice here"},{"location":"CONTRIBUTING/#tell-them-why-they-should-read-your-guidelines","text":"Following these guidelines helps to communicate that you respect the time of the developers managing and developing this open source project. In return, they should reciprocate that respect in addressing your issue, assessing changes, and helping you finalize your pull requests. [source: Hoodie ]","title":"Tell them why they should read your guidelines"},{"location":"CONTRIBUTING/#explain-what-kinds-of-contributions-you-are-looking-for","text":"Keep an open mind! Improving documentation, bug triaging, or writing tutorials are all examples of helpful contributions that mean less work for you. Elasticsearch is an open source project and we love to receive contributions from our community \u2014 you! There are many ways to contribute, from writing tutorials or blog posts, improving the documentation, submitting bug reports and feature requests or writing code which can be incorporated into Elasticsearch itself. [source: Elasticsearch ] Need more inspiration? [1] Devise [2] Geocoder (\u201cknown issues\u201d)","title":"Explain what kinds of contributions you are looking for"},{"location":"CONTRIBUTING/#explain-contributions-you-are-not-looking-for-if-any","text":"Again, defining this up front means less work for you. If someone ignores your guide and submits something you don\u2019t want, you can simply close it and point to your policy. Please, don't use the issue tracker for [support questions]. Check whether the #pocoo IRC channel on Freenode can help with your issue. If your problem is not strictly Werkzeug or Flask specific, #python is generally more active. Stack Overflow is also worth considering. [source: Flask ] Need more inspiration? [1] cucumber-ruby [2] Read the Docs","title":"Explain contributions you are NOT looking for (if any)"},{"location":"CONTRIBUTING/#ground-rules","text":"","title":"Ground Rules"},{"location":"CONTRIBUTING/#set-expectations-for-behavior-yours-and-theirs","text":"This includes not just how to communicate with others (being respectful, considerate, etc) but also technical responsibilities (importance of testing, project dependencies, etc). Mention and link to your code of conduct, if you have one. Responsibilities Ensure cross-platform compatibility for every change that's accepted. Windows, Mac, Debian & Ubuntu Linux. Ensure that code that goes into core meets all requirements in this checklist: https://gist.github.com/audreyr/4feef90445b9680475f2 Create issues for any major changes and enhancements that you wish to make. Discuss things transparently and get community feedback. Don't add any classes to the codebase unless absolutely needed. Err on the side of using functions. Keep feature versions as small as possible, preferably one new feature per version. Be welcoming to newcomers and encourage diverse new contributors from all backgrounds. See the Python Community Code of Conduct . [source: cookiecutter ] Need more inspiration? [1] Celery [2] geocoder","title":"Set expectations for behavior (yours, and theirs)"},{"location":"CONTRIBUTING/#your-first-contribution","text":"Help people who are new to your project understand where they can be most helpful. This is also a good time to let people know if you follow a label convention for flagging beginner issues. Unsure where to begin contributing to Atom? You can start by looking through these beginner and help-wanted issues: Beginner issues - issues which should only require a few lines of code, and a test or two. Help wanted issues - issues which should be a bit more involved than beginner issues. Both issue lists are sorted by total number of comments. While not perfect, number of comments is a reasonable proxy for impact a given change will have. [source: Atom ] Need more inspiration? [1] Read the Docs [2] Django (scroll down to \"Guidelines\" as well)","title":"Your First Contribution"},{"location":"CONTRIBUTING/#bonus-points-add-a-link-to-a-resource-for-people-who-have-never-contributed-to-open-source-before","text":"Here are a couple of friendly tutorials you can include: http://makeapullrequest.com/ and http://www.firsttimersonly.com/ Working on your first Pull Request? You can learn how from this free series, How to Contribute to an Open Source Project on GitHub . [source: React ] As a side note, it helps to use newcomer-friendly language throughout the rest of your document. Here are a couple of examples from Active Admin : At this point, you're ready to make your changes! Feel free to ask for help; everyone is a beginner at first :smile_cat: If a maintainer asks you to \"rebase\" your PR, they're saying that a lot of code has changed, and that you need to update your branch so it's easier to merge.","title":"Bonus points: Add a link to a resource for people who have never contributed to open source before"},{"location":"CONTRIBUTING/#getting-started","text":"","title":"Getting started"},{"location":"CONTRIBUTING/#give-them-a-quick-walkthrough-of-how-to-submit-a-contribution","text":"How you write this is up to you, but some things you may want to include: Let them know if they need to sign a CLA, agree to a DCO, or get any other legal stuff out of the way If tests are required for contributions, let them know, and explain how to run the tests If you use anything other than GitHub to manage issues (ex. JIRA or Trac), let them know which tools they\u2019ll need to contribute For something that is bigger than a one or two line fix: Create your own fork of the code Do the changes in your fork If you like the change and think the project could use it: *Be sure you have followed the code style for the project. Sign the Contributor License Agreement, CLA, with the jQuery Foundation. *Note the jQuery Foundation Code of Conduct. Send a pull request indicating that you have a CLA on file. [source: Requirejs ] Need more inspiration? [1] Active Admin [2] Node.js [3] Ember.js","title":"Give them a quick walkthrough of how to submit a contribution"},{"location":"CONTRIBUTING/#if-you-have-a-different-process-for-small-or-obvious-fixes-let-them-know","text":"Small contributions such as fixing spelling errors, where the content is small enough to not be considered intellectual property, can be submitted by a contributor as a patch, without a CLA. As a rule of thumb, changes are obvious fixes if they do not introduce any new functionality or creative thinking. As long as the change does not affect functionality, some likely examples include the following: Spelling / grammar fixes Typo correction, white space and formatting changes Comment clean up Bug fixes that change default return values or error codes stored in constants Adding logging messages or debugging output Changes to \u2018metadata\u2019 files like Gemfile, .gitignore, build scripts, etc. Moving source files from one directory or package to another [source: Chef ] Need more inspiration? [1] Puppet","title":"If you have a different process for small or \"obvious\" fixes, let them know"},{"location":"CONTRIBUTING/#how-to-report-a-bug","text":"","title":"How to report a bug"},{"location":"CONTRIBUTING/#explain-security-disclosures-first","text":"At bare minimum, include this sentence: If you find a security vulnerability, do NOT open an issue. Email XXXX instead. If you don\u2019t want to use your personal contact information, set up a \u201csecurity@\u201d email address. Larger projects might have more formal processes for disclosing security, including encrypted communication. (Disclosure: I am not a security expert.) Any security issues should be submitted directly to security@travis-ci.org In order to determine whether you are dealing with a security issue, ask yourself these two questions: Can I access something that's not mine, or something I shouldn't have access to? Can I disable something for other people? If the answer to either of those two questions are \"yes\", then you're probably dealing with a security issue. Note that even if you answer \"no\" to both questions, you may still be dealing with a security issue, so if you're unsure, just email us at security@travis-ci.org . [source: Travis CI ] Need more inspiration? [1] Celery [2] Express.js","title":"Explain security disclosures first"},{"location":"CONTRIBUTING/#tell-your-contributors-how-to-file-a-bug-report","text":"You can even include a template so people can just copy-paste (again, less work for you). When filing an issue, make sure to answer these five questions: What version of Go are you using (go version)? What operating system and processor architecture are you using? What did you do? What did you expect to see? What did you see instead? General questions should go to the golang-nuts mailing list instead of the issue tracker. The gophers there will answer or ask you to file an issue if you've tripped over a bug. [source: Go ] Need more inspiration? [1] Celery [2] Atom (includes template)","title":"Tell your contributors how to file a bug report"},{"location":"CONTRIBUTING/#how-to-suggest-a-feature-or-enhancement","text":"","title":"How to suggest a feature or enhancement"},{"location":"CONTRIBUTING/#if-you-have-a-particular-roadmap-goals-or-philosophy-for-development-share-it-here","text":"This information will give contributors context before they make suggestions that may not align with the project\u2019s needs. The Express philosophy is to provide small, robust tooling for HTTP servers, making it a great solution for single page applications, web sites, hybrids, or public HTTP APIs. Express does not force you to use any specific ORM or template engine. With support for over 14 template engines via Consolidate.js, you can quickly craft your perfect framework. [source: Express ] Need more inspiration? Active Admin","title":"If you have a particular roadmap, goals, or philosophy for development, share it here"},{"location":"CONTRIBUTING/#explain-your-desired-process-for-suggesting-a-feature","text":"If there is back-and-forth or signoff required, say so. Ask them to scope the feature, thinking through why it\u2019s needed and how it might work. If you find yourself wishing for a feature that doesn't exist in Elasticsearch, you are probably not alone. There are bound to be others out there with similar needs. Many of the features that Elasticsearch has today have been added because our users saw the need. Open an issue on our issues list on GitHub which describes the feature you would like to see, why you need it, and how it should work. [source: Elasticsearch ] Need more inspiration? [1] Hoodie [2] Ember.js","title":"Explain your desired process for suggesting a feature"},{"location":"CONTRIBUTING/#code-review-process","text":"","title":"Code review process"},{"location":"CONTRIBUTING/#explain-how-a-contribution-gets-accepted-after-its-been-submitted","text":"Who reviews it? Who needs to sign off before it\u2019s accepted? When should a contributor expect to hear from you? How can contributors get commit access, if at all? The core team looks at Pull Requests on a regular basis in a weekly triage meeting that we hold in a public Google Hangout. The hangout is announced in the weekly status updates that are sent to the puppet-dev list. Notes are posted to the Puppet Community community-triage repo and include a link to a YouTube recording of the hangout. After feedback has been given we expect responses within two weeks. After two weeks we may close the pull request if it isn't showing any activity. [source: Puppet ] Need more inspiration? [1] Meteor [2] Express.js","title":"Explain how a contribution gets accepted after it\u2019s been submitted"},{"location":"CONTRIBUTING/#community","text":"If there are other channels you use besides GitHub to discuss contributions, mention them here. You can also list the author, maintainers, and/or contributors here, or set expectations for response time. You can chat with the core team on https://gitter.im/cucumber/cucumber . We try to have office hours on Fridays. [source: cucumber-ruby ] Need more inspiration? [1] Chef [2] Cookiecutter","title":"Community"},{"location":"CONTRIBUTING/#bonus-code-commit-message-and-labeling-conventions","text":"These sections are not necessary, but can help streamline the contributions you receive.","title":"BONUS: Code, commit message and labeling conventions"},{"location":"CONTRIBUTING/#explain-your-preferred-style-for-code-if-you-have-any","text":"Need inspiration? [1] Requirejs [2] Elasticsearch","title":"Explain your preferred style for code, if you have any"},{"location":"CONTRIBUTING/#explain-if-you-use-any-commit-message-conventions","text":"Need inspiration? [1] Angular [2] Node.js","title":"Explain if you use any commit message conventions"},{"location":"CONTRIBUTING/#explain-if-you-use-any-labeling-conventions-for-issues","text":"Need inspiration? [1] StandardIssueLabels [2] Atom","title":"Explain if you use any labeling conventions for issues"}]}